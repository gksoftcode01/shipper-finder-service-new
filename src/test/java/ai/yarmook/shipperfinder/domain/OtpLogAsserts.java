package ai.yarmook.shipperfinder.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OtpLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOtpLogAllPropertiesEquals(OtpLog expected, OtpLog actual) {
        assertOtpLogAutoGeneratedPropertiesEquals(expected, actual);
        assertOtpLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOtpLogAllUpdatablePropertiesEquals(OtpLog expected, OtpLog actual) {
        assertOtpLogUpdatableFieldsEquals(expected, actual);
        assertOtpLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOtpLogAutoGeneratedPropertiesEquals(OtpLog expected, OtpLog actual) {
        assertThat(actual)
            .as("Verify OtpLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOtpLogUpdatableFieldsEquals(OtpLog expected, OtpLog actual) {
        assertThat(actual)
            .as("Verify OtpLog relevant properties")
            .satisfies(a -> assertThat(a.getMobileNumber()).as("check mobileNumber").isEqualTo(expected.getMobileNumber()))
            .satisfies(a -> assertThat(a.getOtpValue()).as("check otpValue").isEqualTo(expected.getOtpValue()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getSendDate()).as("check sendDate").isEqualTo(expected.getSendDate()))
            .satisfies(a -> assertThat(a.getDelivered()).as("check delivered").isEqualTo(expected.getDelivered()))
            .satisfies(a -> assertThat(a.getVerified()).as("check verified").isEqualTo(expected.getVerified()))
            .satisfies(a -> assertThat(a.getTriesCount()).as("check triesCount").isEqualTo(expected.getTriesCount()))
            .satisfies(a -> assertThat(a.getResponse()).as("check response").isEqualTo(expected.getResponse()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOtpLogUpdatableRelationshipsEquals(OtpLog expected, OtpLog actual) {
        // empty method
    }
}
